[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Automated Testing in R",
    "section": "",
    "text": "This book is a work in progress. 🚧\n\n\n\nTo read about automated testing in R, visit my blog.\n\n\n\nPreface\nTesting can feel like a chore.\nYou’re coding away, everything seems fine—until it isn’t. A bug pops up. You fix it, but then something else breaks. It’s frustrating, time-consuming, and stressful. But what if it didn’t have to be? What if testing wasn’t just about catching bugs, but about making your work smoother, faster, and more reliable?\nThat’s what this book is about.\nR has grown from a tool for statisticians into a powerful programming language used for everything from exploratory data analysis to building Shiny apps and production-grade data pipelines. But as your projects grow, so do the risks. Code becomes harder to change. Bugs creep in. Shipping features slows down.\nTesting can change that.\nWith automated testing, you can catch problems early, make changes with confidence, and keep your code in shape no matter how complex it gets. It’s not just about preventing errors — it’s about giving yourself the freedom to experiment and innovate without fear.\nThis book is your guide to testing in R.\nWe’ll start with the fundamentals: why testing matters, what makes a good test, and how to think like a tester. From there, we’ll get into the practical stuff. You’ll learn how to write unit tests, handle tricky scenarios with mocks and stubs, and test Shiny apps. We’ll cover advanced techniques, like snapshot testing and strategies for tackling legacy code.\nBut this isn’t just about the “how.” It’s about the “why.”\nTesting isn’t just a skill — it’s a mindset. It’s about approaching your work with care and confidence. It’s about solving problems before they happen. And it’s about making sure the code you write today won’t break tomorrow.\nWhether you’re building packages, working on Shiny apps, or writing scripts for data analysis, this book will show you how testing can make your life easier — and your code better.\nLet’s get started.\n\nThe book assumes you have some experience with unit-testing and using {testthat}. If you are new to unit testing in R, I recommend you to read the {testthat} documentation first.\n\n\nLicense\nThis book is licensed to you under Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "anatomy-of-a-test.html",
    "href": "anatomy-of-a-test.html",
    "title": "1  Anatomy of a test",
    "section": "",
    "text": "1.1 Arrange\nA good test makes it clear what it’s checking.\nWhen a test mixes setup, running the system, and checking results, it gets confusing. Separating these steps into clear phases helps make the test’s purpose obvious. This way, anyone reading the test can follow along easily.\nWe can make this separation explicit with Arrange, Act, Assert comments.\nThose comments aren’t just for show. They help you structure your tests and keep them focused. They also make it easier to spot missing steps or unnecessary complexity. They keep your tests consistent, which makes them easier to read and maintain.\nIf you are starting to write a test, put those comments in place first, then fill in the blanks.\nThe first part of each test should setup the environment for the tested code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Anatomy of a test</span>"
    ]
  },
  {
    "objectID": "anatomy-of-a-test.html#arrange",
    "href": "anatomy-of-a-test.html#arrange",
    "title": "1  Anatomy of a test",
    "section": "",
    "text": "test_that(\"...\", {\n  # Arrange \n  machine &lt;- deep_thought$connect() \n  question &lt;- \"Everything\" \n\n  # Act\n\n  # Assert\n\n})",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Anatomy of a test</span>"
    ]
  },
  {
    "objectID": "anatomy-of-a-test.html#act",
    "href": "anatomy-of-a-test.html#act",
    "title": "1  Anatomy of a test",
    "section": "1.2 Act",
    "text": "1.2 Act\nThe second part of each test is to call the code that’s being tested.\ntest_that(\"...\", {\n  # Arrange\n  machine &lt;- deep_thought$connect()\n  question &lt;- \"Everything\"\n\n  # Act \n  result &lt;- the_ultimate_question_of(machine, question) \n\n  # Assert\n\n})",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Anatomy of a test</span>"
    ]
  },
  {
    "objectID": "anatomy-of-a-test.html#assert",
    "href": "anatomy-of-a-test.html#assert",
    "title": "1  Anatomy of a test",
    "section": "1.3 Assert",
    "text": "1.3 Assert\nThe third part of each test is to assert that the code behaves as expected.\ntest_that(\"...\", {\n  # Arrange\n  machine &lt;- deep_thought$connect()\n  question &lt;- \"Everything\"\n\n  # Act\n  result &lt;- the_ultimate_question_of(machine, question)\n\n  # Assert \n  expect_equal(result, 42) \n})",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Anatomy of a test</span>"
    ]
  },
  {
    "objectID": "anatomy-of-a-test.html#teardown-if-needed",
    "href": "anatomy-of-a-test.html#teardown-if-needed",
    "title": "1  Anatomy of a test",
    "section": "1.4 Teardown if needed",
    "text": "1.4 Teardown if needed\nIf we need to free resources, we should do that at the end of the test.\ntest_that(\" \", {\n  # Arrange\n  machine &lt;- deep_thought$connect()\n  question &lt;- \"Everything\"\n\n  # Act\n  result &lt;- the_ultimate_question_of(machine, question)\n\n  # Assert\n  expect_equal(result, 42)\n\n  machine$disconnect() \n})",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Anatomy of a test</span>"
    ]
  }
]